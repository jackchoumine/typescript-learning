/*
 * @Description: 类型检查机制
 * @Date: 2020-05-21 23:08:08
 * @Author: JackChouMine
 * @LastEditTime: 2020-05-23 15:37:27
 * @LastEditors: JackChouMine
 */
// 什么是类型检查机制：
// 类型检查机制：TS 编译器在做类型检查时，遵循的一些原则以及表现出的一些行为。
// 作用：辅助开发，提供开发效率。
// 三种机制：
// 1. 类型推断
// 2. 类型兼容
// 3. 类型保护

// 类型推断:不需要显式地指定类型，TS会根据一些规则推断出类型。
// 1. 基础类型推断
// 2. 最佳通用类型推断
// 3. 上下文类型推断

// 基础类型推断
/**
 * 声明变量、设置函数默认参数时，不必声明类型，会根据值的类型推断类型。
 */
let hello = 'hello';
let array = []; // 推断为 any[]
const NO = 34; // 常量，不推断
const c = (x = 20) => x + 1; // 函数默认参数类型推断

// 最佳通用类型推断：当需要从多个值中推断类型时，会推断出兼容当前所有值的最佳类型。
let testArray = [1, null]; // 关闭strictNullChecks，会推断成 number[]

// 以上是从右向左的推断，即从表达式的值推断变量类型。
// 上下文推断：根据代码上下文推断变量类型，比如事件绑定

window.onkeydown = (ev: Event) => { // TODO 不指定类型，报错为何？
  console.log(ev);
};

// 类型断言：用时候开发者比编译器更了解变量类型，可以手动指定变量的类型。

interface Foo {
  bar: number;
}
// const bar: Foo = {};// 使用接口约定对象结构，会提示没有声明 bar 属性
const bar = {} as Foo; // 使用类型断言，但是不会提示没有声明 bar 属性，辅助信息丢失，因此，不要滥用类型断言。没有对代码上下文有充足的了解，这样可能引发类型错误。
